<?php
/*
 *   Copyright (c) 2009 msakamoto-sf <msakamoto-sf@users.sourceforge.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

require_once('phphtmlparser/htmlparser.inc');

/*
 * &amazon()/#amazon|| wiki inline/block plugin
 *
 * usage:
 * <code>
 * &amazon() { (amazon product link html code) }
 *
 * or
 *
 * #amazon||>
 * (amazon product link html code)
 * ||<
 * </code>
 *
 * "amazon product link html code" is generated by amazon associate homepage.
 *
 * @author msakamoto-sf <msakamoto-sf@users.sourceforge.net>
 * @version $Id: yb_plugin_wiki_amazon.php 569 2010-03-06 05:48:05Z msakamoto-sf $
 * @param string plugin parameter
 * @param string inline text
 * @param wiki_Context reference
 * @return string
 */
function yb_plugin_wiki_amazon_invoke_inline($param1, $param2, &$ctx)
{
    $src = trim($param2);
    $d = _yb_plugin_wiki_amazon_parse($src);
    return _yb_plugin_wiki_amazon_format($d);
}

function yb_plugin_wiki_amazon_invoke_block($param1, $param2, &$ctx)
{
    $src = trim($param2);
    $d = _yb_plugin_wiki_amazon_parse($src);
    return _yb_plugin_wiki_amazon_format($d);
}

function _yb_plugin_wiki_amazon_weak_url_check($url)
{
    $r = parse_url($url);
    if (!$r) { return false; }

    if ('http' != $r['scheme']) { return false; }

    $host = $r['host'];
    $els = explode('.', $host);
    // ex: 'www', 'foo-amazon', 'co', 'us'

    array_pop($els);
    // ex: 'www', 'foo-amazon', 'co'

    foreach ($els as $e) {
        if (false !== strpos($e, 'amazon')) {
            return true;
        }
    }

    return false;
}

function _yb_plugin_wiki_amazon_format($datas)
{
    if (!is_array($datas) || !isset($datas['type'])) {
        return '';
    }

    if ('text' == $datas['type']) {
        if (!_yb_plugin_wiki_amazon_weak_url_check(
            $datas['attr']['a_href'])) {
            return '';
        }
        if (!_yb_plugin_wiki_amazon_weak_url_check(
            $datas['attr']['img_src'])) {
            return '';
        }
        $fmt = '<a href="%s" target="_blank">%s</a><img src="%s" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />';
        return sprintf($fmt, 
            h(_y_($datas['attr']['a_href'])), 
            h(_y_($datas['attr']['text'])), 
            h(_y_($datas['attr']['img_src'])));
    }

    if ('iframe' == $datas['type']) {
        if (!_yb_plugin_wiki_amazon_weak_url_check(
            $datas['attr']['src'])) {
            return '';
        }
        $fmt = '<iframe src="%s" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>';
        return sprintf($fmt, h(_y_($datas['attr']['src'])));
    }
    return '';
}

define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_RESET',    0);
define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_BEGIN_A',  1);
define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_TEXT',     2);
define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END_A',    3);
define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_IFRAME',   4);
define('YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END',      5);

function _yb_plugin_wiki_amazon_parse($src)
{
    $parser =& new HtmlParser($src);

    $link_text_data = array(
        'a_href' => '',
        'text' => '',
        'img_src' => '',
    );
    $use_link_text = false;

    $link_iframe_data = array('src' => '');
    $use_link_iframe = false;

    $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_RESET;
    while ($parser->parse()) {
        $nodename = strtolower($parser->iNodeName);
        switch ($nodename) {
        case 'a':
            if (NODE_TYPE_ELEMENT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_RESET == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_BEGIN_A;

                $use_link_text = true;

                $attrs = $parser->iNodeAttributes;
                if (isset($attrs['href'])) {
                    $link_text_data['a_href'] = $attrs['href'];
                }
            }
            if (NODE_TYPE_ENDELEMENT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_TEXT == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END_A;
            }
            break;
        case 'iframe':
            if (NODE_TYPE_ELEMENT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_RESET == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_IFRAME;

                $use_link_iframe = true;

                $attrs = $parser->iNodeAttributes;
                if (isset($attrs['src'])) {
                    $link_iframe_data['src'] = $attrs['src'];
                }
            }
            if (NODE_TYPE_ENDELEMENT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_IFRAME == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END;
            }
            break;
        case 'text':
            if (NODE_TYPE_TEXT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_BEGIN_A == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_TEXT;

                $link_text_data['text'] = $parser->iNodeValue;
            }
            break;
        case 'img':
            if (NODE_TYPE_ELEMENT == $parser->iNodeType && 
                YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END_A == $stat) {
                $stat = YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END;

                $attrs = $parser->iNodeAttributes;
                if (isset($attrs['src'])) {
                    $link_text_data['img_src'] = $attrs['src'];
                }
            }
        }
    }

    if ($stat != YB_PLUGIN_WIKI_AMAZON_PARSE_STAT_END) {
        return null;
    }

    if ($use_link_text) {
        return array(
            'type' => 'text',
            'attr' => $link_text_data,
        );
    }
    if ($use_link_iframe) {
        return array(
            'type' => 'iframe',
            'attr' => $link_iframe_data,
        );
    }
    return null;
}


/**
 * Local Variables:
 * mode: php
 * coding: iso-8859-1
 * tab-width: 4
 * c-basic-offset: 4
 * c-hanging-comment-ender-p: nil
 * indent-tabs-mode: nil
 * End:
 * vim: set expandtab tabstop=4 shiftwidth=4:
 */
