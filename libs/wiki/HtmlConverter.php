<?php
/*
 *   Copyright (c) 2007 msakamoto-sf <msakamoto-sf@users.sourceforge.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

/**
 * Wiki HTML Converter
 *
 * Special Thanks to KinoWiki.
 *
 * @author msakamoto-sf <msakamoto-sf@users.sourceforge.net>
 * @version $Id: HtmlConverter.php 543 2009-07-14 02:27:19Z msakamoto-sf $
 */

/**
 * Convert from internal representation elements which are generated by 
 * parser to HTML string data.
 */
class wiki_HtmlConverter
{
    /**
     * top level element
     *
     * @access protected
     * @type wiki_T_Element
     */
    var $_root;

    /**#@+
     * @access protected
     */

    // {{{ wiki_HtmlConverter()

    function wiki_HtmlConverter(&$root)
    {
        $this->_root =& $root;
    }

    // }}}
    // {{{ invoke_plugin

    function invoke_plugin(&$e, $type = 'inline')
    {
        $pluginname = $e->getpluginname();
        $param1 = $e->getparam1();
        $param2 = $e->getparam2();
        $ctx =& $e->getcontext();

        $_dir = _YB('dir.plugin.wiki');

        $__pfile = 'yb_plugin_wiki_' . $pluginname . '.php';
        $_pfile = realpath($_dir . '/' . $__pfile);
        $ret = include_once $_pfile;
        if (!$ret) {
            return '<span class="warning">(plugin file: "' . $__pfile 
                . '" for plugin: "' . $pluginname 
                . '" was not found!!)</span>'
                . nl2br(h($e->getsource()));
        }

        $_fname = 'yb_plugin_wiki_' . $pluginname . '_invoke_';
        $_fname .= ($type == 'block') ? 'block' : 'inline';

        if (!function_exists($_fname)) {
            return '<span class="warning">(plugin function: "' . $_fname 
                . '" for plugin: "' . $pluginname 
                . '" was not found!!)</span>'
                . nl2br(h($e->getsource()));
        }

        return $_fname($param1, $param2, $ctx);
    }

    // }}}

    /**#@-*/

    /**#@+
     * @static
     * @access public
     */

    // {{{ visit()

    function visit(&$e)
    {
        $conv =& new wiki_HtmlConverter($e);
        return $e->accept($conv);
    }

    // }}}
    // {{{ visitT_Body

    function visitT_Body(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }
        return join("\n", $ret);
    }

    // }}}
    // {{{ visitT_Empty

    function visitT_Empty(&$e)
    {
        return '';
    }

    // }}}
    // {{{ visitT_Heading

    function visitT_Heading(&$e)
    {
        static $list = array('',
            '<h3 id="%s">%s</h3>',
            '<h4 id="%s">%s</h4>',
            '<h5 id="%s">%s</h5>',
            '<h6 id="%s">%s</h6>');

        $level = $e->getlevel();
        $ctx =& $e->getcontext();
        $id = 'id' . substr(md5($ctx->did . $level . $e->getsource()), 0, 6);
        $el =& $e->getelem();
        $str = $el->accept($this);

        $fmt = '';
        if (isset($list[$level])) {
            $fmt = $list[$level];
        }

        return sprintf($fmt, $id, $str);
    }

    // }}}
    // {{{ visitT_Horizon

    function visitT_Horizon(&$e)
    {
        return '<hr />';
    }

    // }}}
    // {{{ visitT_Pre

    function visitT_Pre(&$e)
    {
        return '<pre>' . h($e->gettext()) . '</pre>';
    }

    // }}}
    // {{{ visitT_BlockQuote

    function visitT_BlockQuote(&$e)
    {
        $el =& $e->getelem();
        return '<blockquote>' . $el->accept($this) . '</blockquote>';
    }

    // }}}
    // {{{ visitT_UL

    function visitT_UL(&$e)
    {
        $el =& $e->getelem();
        return "<ul>" . $el->accept($this) . "</ul>";
    }

    // }}}
    // {{{ visitT_OL

    function visitT_OL(&$e)
    {
        $el =& $e->getelem();
        return "<ol>" . $el->accept($this) . "</ol>";
    }

    // }}}
    // {{{ visitT_List

    function visitT_List(&$e)
    {
        $ret[] = '<li>';
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
            $_next =& $elem->getnext();
            if (strtolower(get_class($_next)) == 'wiki_t_li'){
                $ret[] = "</li>\n<li>";
            }
        }
        $ret[] = '</li>';
        return join('', $ret);
    }

    // }}}
    // {{{ visitT_LI

    function visitT_LI(&$e)
    {
        $el =& $e->getelem();
        return $el->accept($this);
    }

    // }}}
    // {{{ visitT_DL

    function visitT_DL(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }
        return "<dl>\n" . join("\n", $ret) . "\n</dl>";
    }

    // }}}
    // {{{ visitT_DT

    function visitT_DT(&$e)
    {
        $el =& $e->getelem();
        return '<dt>' . $el->accept($this) . '</dt>';
    }

    // }}}
    // {{{ visitT_DD

    function visitT_DD(&$e)
    {
        $el =& $e->getelem();
        return '<dd>' . $el->accept($this) . '</dd>';
    }

    // }}}
    // {{{ visitT_Table

    function visitT_Table(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }
        return "<table>\n" . join("\n", $ret) . "\n</table>";
    }

    // }}}
    // {{{ visitT_TR

    function visitT_TR(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }
        return "\t<tr>\n" . join("\n", $ret) . "\n\t</tr>";
    }

    // }}}
    // {{{ visitT_TD

    function visitT_TD(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }

        $tag = $e->isheader() ? 'th' : 'td';
        $align = ($e->getalign() != null) 
            ? ' text-align: ' . $e->getalign() . ';' 
            : '';
        $bgcolor = ($e->getbgcolor() != null) 
            ? ' background-color: ' . $e->getbgcolor() . ';' 
            : '';
        $style = (($align . $bgcolor) != '') 
            ? ' style="' . $align . $bgcolor . '"' 
            : '';

        return "\t\t<{$tag}{$style}>" . join("\n", $ret) . "</{$tag}>";
    }

    // }}}
    // {{{ visitT_BlockPlugin

    function visitT_BlockPlugin(&$e)
    {
        return $this->invoke_plugin($e, 'block');
    }

    // }}}
    // {{{ visitT_Comment

    function visitT_Comment(&$e)
    {
        return '';
    }

    // }}}
    // {{{ visitT_Paragraph

    function visitT_Paragraph(&$e)
    {
        $ret[] = '<p class="paragraph">';
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this) . '<br />';
        }
        $ret[] = '</p>';
        return join("\n", $ret);
    }

    // }}}
    // {{{ visitT_Line

    function visitT_Line(&$e)
    {
        $ret = array();
        foreach ($e->getelements() as $elem) {
            $ret[] = $elem->accept($this);
        }
        return join('', $ret);
    }

    // }}}
    // {{{ visitT_URL

    function visitT_URL(&$e)
    {
        $url = h($e->geturl());
        return "<a class=\"externallink\" href=\"$url\" target=\"_blank\">$url</a>";
    }

    // }}}
    // {{{ visitT_Mail

    function visitT_Mail(&$e)
    {
        $address = yb_Util::protectmail_url($e->getaddress());
        $alias = yb_Util::protectmail_html($e->getaddress());
        return "<a class=\"maillink\" href=\"mailto:$address\">$alias</a>";
    }

    // }}}
    // {{{ visitT_BracketName

    function visitT_BracketName(&$e)
    {
        $pagename = $e->getpagename();
        $alias = $e->getalias() != '' ? $e->getalias() : $e->getpagename();
        $ctx =& $e->getcontext();

        if (preg_match('/^' . WIKI_EXP_URL . '$/', $pagename)) {

            $alias = h($alias);
            return '<a class="externallink" href="' . $pagename 
                . '" target="_blank">' . $alias . '</a>';

        } else if (preg_match('/^' . WIKI_EXP_MAIL . '$/', $pagename)) {

            $address = yb_Util::protectmail_url($pagename);
            if (preg_match('/^' . WIKI_EXP_MAIL . '$/', $alias)) {
                $alias = yb_Util::protectmail_html($alias);
            } else {
                $alias = h($alias);
            }
            return '<a class="maillink" href="mailto:' 
                . $address . '">' . $alias . '</a>';

// Do we REALY need InterWikiLink feature?
//        } else if (
//            mb_ereg('^(.+?):(.+)$', $pagename, $m) && 
//                !Page::getinstance($pagename)->isexist()
//            ) {
//
//            return makeinterwikilink($m[1], $m[2], $alias);
// Humm...

        } else if (preg_match('/^\d+$/', $pagename)) {
            if ($pagename == $alias) {
                $alias = '';
            }
            return '<yb_link ' . $pagename . ' >' . $alias . '</yb_link>';
        } else {
            if ($pagename == $alias) {
                $alias = '';
            }
            $fullname = yb_Util::resolvepath($pagename, $ctx->pagename);
            return '<yb_link ' . $pagename . ' >' . $alias . '</yb_link>';
        }
    }

    // }}}
    // {{{ visitT_InlinePlugin

    function visitT_InlinePlugin(&$e)
    {
        return $this->invoke_plugin($e, 'inline');
    }

    // }}}
    // {{{ visitT_Footnote

    function visitT_Footnote(&$e)
    {
        $footnote =& wiki_Footnote::singleton();
        $ctx =& $e->getcontext();
        $num = $footnote->reserve($ctx->did);
        $el =& $e->getelem();
        return $footnote->setnote($ctx->did, $el->accept($this), $num);
    }

    // }}}
    // {{{ visitT_Strong

    function visitT_Strong(&$e)
    {
        $el =& $e->getelem();
        $str = $el->accept($this);
        $level = $e->getlevel();
        return $level == 1 ? "<em>$str</em>" : "<strong>$str</strong>";
    }

    // }}}
    // {{{ visitT_Italic

    function visitT_Italic(&$e)
    {
        $el =& $e->getelem();
        $str = $el->accept($this);
        $level = $e->getlevel();
        return $level == 3 ? "<em>$str</em>" : "<strong>$str</strong>";
    }

    // }}}
    // {{{ visitT_Del

    function visitT_Del(&$e)
    {
        $el =& $e->getelem();
        $str = $el->accept($this);
        return '<del>' . $str . '</del>';
    }

    // }}}
    // {{{ visitT_String

    function visitT_String($e)
    {
        $exp = '/&amp;(#\d{2,4}|#x[0-9a-fA-F]{2,3}|' 
            . CHARACTER_ENTITY_REFERENCES . ');/';

        $str = h($e->getstring());
        // "&amp;", "&#x0A", "&uarr;" -> 
        // "&amp;amp;", "&amp;#x0A", "&amp;uarr;"

        // restore these entity references.
        return preg_replace($exp, '&\1;', $str);
    }

    // }}}

    /**#@-*/
}

// {{{ wiki_Footnote

/**
 * Footnote Manager, singleton.
 */
class wiki_Footnote
{
    /**
     * @access protected
     * @type array
     */
    var $_note = array();

    // {{{ wiki_Footnote()

    /**
     * @access protected
     */
    function wiki_Footnote()
    {
        //do nothing.
    }

    // }}}
    // {{{ singleton()

    /**
     * @static
     * @access public
     */
    function &singleton()
    {
        static $ins = null;
        if ($ins == null) {
            $ins = new wiki_Footnote();
        }
        return $ins;
    }

    // }}}
    // {{{ reserve()

    /**
     * Reserve only number.
     *
     * @param integer data id
     * @return integer footnote-number.
     */
    function reserve($did)
    {
        $this->_note[$did][] = '';
        return count($this->_note[$did]);
    }

    // }}}
    // {{{ setnote

    /**
     * Set footnote.
     *
     * @access public
     * @param integer data id
     * @param string footnote html data
     * @param integer reserved footnote-number
     * @return string anchor text
     */
    function setnote($did, $html, $num)
    {
        if (!isset($this->_note[$did][$num - 1])) {
            return '';
        }
        $this->_note[$did][$num - 1] = $html;
        $p = $did . '_' . $num;
        $note = strip_tags($html);
        $str  = '<span class="hidden">(</span>';

        $str .= '<a class="footnote" href="#footnote_' . $p . '" '
            . 'id="footnote_' . $p . '_r" '
            . ' title="' . $note . '">*' . $num . '</a>';

        $str .= '<span class="hidden">)</span>';
        return $str;
    }

    // }}}
    // {{{ getnote()

    /**
     * Get footnotes.
     *
     * @access public
     * @param integer data id
     * @return string html text data.
     */
    function getnote($did)
    {
        if (!isset($this->_note[$did])) {
            return '';
        }

        foreach ($this->_note[$did] as $i => $item) {
            $i++;
            $p = $did . '_' . $i;
            $str[] = "<a id=\"footnote_{$p}\" href=\"#footnote_{$p}_r\">*{$i}</a>: {$item}";
        }
        return "<div class=\"footnote\">\n" 
            . join("<br />\n", $str) 
            . "\n</div>";
    }

    // }}}
}

// }}}

/**
 * Local Variables:
 * mode: php
 * coding: iso-8859-1
 * tab-width: 4
 * c-basic-offset: 4
 * c-hanging-comment-ender-p: nil
 * indent-tabs-mode: nil
 * End:
 * vim: set expandtab tabstop=4 shiftwidth=4:
 */
